# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type EntityHistoryUser {
  id: String
  displayName: String
}

type EntityHistoryChange {
  changedAt: DateTime
  fieldName: String
  oldValue: String
  newValue: String
  changedBy: EntityHistoryUser
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EntityHistory {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: EntityHistoryUser
  updatedBy: EntityHistoryUser
  changes: [EntityHistoryChange!]
}

type Permission {
  rsid: String!
  rsname: String!
  scopes: [String!]
}

type Project {
  id: String!
  name: String!
  description: String
  organization: Organization!
  users: [User!]!
}

type Team {
  id: String!
  name: String!
  description: String
  organization: Organization!
  users: [User!]!
}

type UserAttribute {
  id: String!
  name: String!
  value: String!
}

type User {
  id: String!
  email: String!
  firstName: String!
  lastName: String
  username: String!
  role: String!
  organizations: [Organization!]!
  projects: [Project!]!
  teams: [Team!]!
  attributes: [UserAttribute!]!
  permissions: [Permission!]!
}

type Organization {
  id: String!
  name: String!
  projects: [Project!]!
  teams: [Team!]!
  users: [User!]!
}

type TaskStatusType {
  id: String!
  name: String!
}

type Task {
  id: String!
  name: String!
  description: String
  assignedTo: User
  taskStatusType: TaskStatusType
  project: Project!
}

type SearchTeam {
  teams: [Team!]!
  history: [EntityHistory!]!
  totalCount: Float!
}

type Query {
  getEntityHistory(id: String!, orderBy: OrderByInput): EntityHistory
  getOrganization(id: String!): Organization
  hasPermission(permissions: [String!]!): Boolean!
  getProject(id: String!): Project
  searchProjects(searchString: String, limit: Float, offset: Float, orderBy: ProjectOrderByUpdatedAtInput): [Project!]!
  searchTasks(searchTasksInput: SearchTasksInput!): [Task!]!
  getTask(id: String!): Task
  getTaskStatusTypes: [TaskStatusType!]!
  getTeam(id: String!): Team
  searchTeams(searchString: String, limit: Float, offset: Float, orderBy: TeamOrderByUpdatedAtInput): SearchTeam!
  userInfo: User!
  searchUsers(organizationId: String!): [User!]!
}

input OrderByInput {
  fieldName: String!
  direction: SortOrder!
}

enum SortOrder {
  asc
  desc
}

input ProjectOrderByUpdatedAtInput {
  updated_at: SortOrder!
}

input SearchTasksInput {
  searchString: String
  projectIds: [String!]
  limit: Float
  offset: Float
  orderBy: OrderByUpdatedAtInput
}

input OrderByUpdatedAtInput {
  updated_at: SortOrder!
}

input TeamOrderByUpdatedAtInput {
  updatedAt: SortOrder!
}

type Mutation {
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  createProject(createProjectInput: CreateProjectInput!): Project!
  createTask(createTaskInput: CreateTaskInput!): Task!
  updateTask(updateTaskInput: UpdateTaskInput!): Task!
  updateTeam(updateTeamInput: UpdateTeamInput!): Team!
  createTeam(createTeamInput: CreateTeamInput!): Team!
}

input UpdateProjectInput {
  name: String!
  description: String
  organizationId: String!
  userIds: [String!]!
  id: String!
}

input CreateProjectInput {
  name: String!
  description: String
  organizationId: String!
  userIds: [String!]!
}

input CreateTaskInput {
  projectId: String!
  name: String!
  description: String
  taskStatusTypeId: String
  assignedTo: String
}

input UpdateTaskInput {
  projectId: String!
  name: String!
  description: String
  taskStatusTypeId: String
  assignedTo: String
  id: String!
}

input UpdateTeamInput {
  name: String!
  description: String!
  organizationId: String!
  userIds: [String!]!
  id: String!
}

input CreateTeamInput {
  name: String!
  description: String!
  organizationId: String!
  userIds: [String!]!
}