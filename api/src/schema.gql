# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Organization {
  organization_id: String!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type TeamUser {
  team_user_id: String!
  team_id: String!
  user_id: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type Team {
  team_id: String!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  organization: Organization!
  users: [User!]!
  team_user: [TeamUser!]!
}

type Permission {
  rsid: String!
  rsname: String!
  scopes: [String!]
}

type User {
  user_id: String!
  username: String!
  email: String!
  firstName: String!
  lastName: String
  jobTitle: String
  teams: [Team!]!
  permissions: [Permission!]!
  organizations: [Organization!]!
}

type ProjectUser {
  project_user_id: String!
  project_id: String!
  user_id: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type Project {
  project_id: String!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  organization: Organization!
  users: [User!]!
  project_user: [ProjectUser!]!
}

type TaskStatusType {
  task_status_type_id: String!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type Task {
  task_id: String!
  name: String!
  description: String!
  assigned_to: String!
  assigned_to_user: User!
  created_at: DateTime!
  updated_at: DateTime!
  project: Project!
  task_status_type_id: String!
  task_status_type: TaskStatusType!
}

type Query {
  organizationById(id: String!): Organization
  hasPermission(permissions: [String!]!): Boolean!
  getProject(id: String!): Project
  searchProjects(searchString: String, skip: Float, take: Float, orderBy: ProjectOrderByUpdatedAtInput): [Project!]!
  searchTasks(searchTasksInput: SearchTasksInput!): [Task!]!
  getTeam(id: String!): Team
  searchTeams(searchString: String, skip: Float, take: Float, orderBy: TeamOrderByUpdatedAtInput): [Team!]!
  userInfo: User!
  searchUsers(organizationId: String!): [User!]!
}

input ProjectOrderByUpdatedAtInput {
  updated_at: SortOrder!
}

enum SortOrder {
  asc
  desc
}

input SearchTasksInput {
  searchString: String
  projectIds: [String!]
  skip: Float
  take: Float
  orderBy: OrderByUpdatedAtInput
}

input OrderByUpdatedAtInput {
  updated_at: SortOrder!
}

input TeamOrderByUpdatedAtInput {
  updated_at: SortOrder!
}

type Mutation {
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  createProject(createProjectInput: CreateProjectInput!): Project!
  updateTeam(updateTeamInput: UpdateTeamInput!): Team!
  createTeam(createTeamInput: CreateTeamInput!): Team!
}

input UpdateProjectInput {
  name: String!
  organizationId: String!
  userIds: [String!]!
  projectId: String!
}

input CreateProjectInput {
  name: String!
  organizationId: String!
  userIds: [String!]!
}

input UpdateTeamInput {
  teamId: String!
  name: String!
  organizationId: String!
  userIds: [String!]!
}

input CreateTeamInput {
  name: String!
  organizationId: String!
  userIds: [String!]!
}
