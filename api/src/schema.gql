# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Permission {
  rsid: String!
  rsname: String!
  scopes: [String!]
}

type Project {
  id: String!
  name: String!
  description: String!
  organization: Organization!
  users: [User!]!
}

type Team {
  id: String!
  name: String!
  description: String!
  organization: Organization!
  users: [User!]!
}

type UserAttribute {
  id: String!
  name: String!
  value: String!
}

type User {
  id: String!
  email: String!
  firstName: String!
  lastName: String
  username: String!
  organizations: [Organization!]!
  projects: [Project!]!
  teams: [Team!]!
  attributes: [UserAttribute!]!
  permissions: [Permission!]!
}

type Organization {
  id: String!
  name: String!
  users: [User!]!
}

type TaskStatusType {
  id: String!
  name: String!
}

type Task {
  id: String!
  name: String!
  description: String!
  assignedTo: User!
  taskStatusType: TaskStatusType!
  project: Project!
}

type Query {
  organizationById(id: String!): Organization
  hasPermission(permissions: [String!]!): Boolean!
  getProject(id: String!): Project
  searchProjects(searchString: String, limit: Float, offset: Float, orderBy: ProjectOrderByUpdatedAtInput): [Project!]!
  searchTasks(searchTasksInput: SearchTasksInput!): [Task!]!
  getTask(id: String!): Task
  getTeam(id: String!): Team
  searchTeams(searchString: String, limit: Float, offset: Float, orderBy: TeamOrderByUpdatedAtInput): [Team!]!
  userInfo: User!
  searchUsers(organizationId: String!): [User!]!
}

input ProjectOrderByUpdatedAtInput {
  updated_at: SortOrder!
}

enum SortOrder {
  asc
  desc
}

input SearchTasksInput {
  searchString: String
  projectIds: [String!]
  limit: Float
  offset: Float
  orderBy: OrderByUpdatedAtInput
}

input OrderByUpdatedAtInput {
  updated_at: SortOrder!
}

input TeamOrderByUpdatedAtInput {
  updated_at: SortOrder!
}

type Mutation {
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  createProject(createProjectInput: CreateProjectInput!): Project!
  updateTask(updateTaskInput: UpdateTaskInput!): Task!
  updateTeam(updateTeamInput: UpdateTeamInputDto!): Team!
  createTeam(createTeamInput: CreateTeamInputDto!): Team!
}

input UpdateProjectInput {
  name: String!
  organizationId: String!
  userIds: [String!]!
  projectId: String!
}

input CreateProjectInput {
  name: String!
  organizationId: String!
  userIds: [String!]!
}

input UpdateTaskInput {
  taskId: String!
  taskStatusTypeId: String!
  name: String!
  description: String!
  projectId: String!
  assignedTo: String!
}

input UpdateTeamInputDto {
  teamId: String!
  name: String!
  organizationId: String!
  userIds: [String!]!
}

input CreateTeamInputDto {
  name: String!
  organizationId: String!
  userIds: [String!]!
}